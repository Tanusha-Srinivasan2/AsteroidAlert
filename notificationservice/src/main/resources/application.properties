spring.application.name=notificationservice
server.port = 8081

#MySQL Database Configuration
spring.datasource.url = jdbc:mysql://localhost:3307/asteroidalerting
spring.datasource.username=Tanu
spring.datasource.password=123
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update

#Kafka
spring.kafka.bootstrap.servers = localhost:9092
spring.kafka.consumer.group-id= asteroid-alert
spring.kafka.consumer.key-deserializer = org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer = org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages = com.star.asteroidalerting.event

#MailTrap
spring.mail.host= sandbox.smtp.mailtrap.io
spring.mail.port=2525
spring.mail.username=7303242f0dfe95
spring.mail.password=22eb8e64ed8b63
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true //these two are to be able to connect to mailtrap

email.service.from.email=tanushaaa219@gmail.com //email of the sender

# Your Google Client ID from Google Cloud Console
# IMPORTANT: REPLACE THIS WITH YOUR ACTUAL GOOGLE CLIENT ID!
google.client-id=267018054140-epftc4fdf5f7u544vcpkf6ev0co6debl.apps.googleusercontent.com

# Spring Security OAuth2 Resource Server configuration
# This tells Spring Security where to find Google's public keys to verify JWT signatures.
# Google's JWK Set URI for ID tokens is fixed.
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG
